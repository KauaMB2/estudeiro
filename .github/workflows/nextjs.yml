name: CI/CD Pipeline - Next.js (Tests → Build → Notify)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

concurrency:
  group: "ci-cd-pipeline"
  cancel-in-progress: false

env:
  NODE_VERSION: "20"

jobs:
  # -----------------------
  # Job: Tests
  # Runs in parallel with "build"
  # -----------------------
  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    outputs:
      test_result: ${{ steps.set_status.outputs.test_result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Run tests (Vitest) - generates HTML report at ./vitestreport/index.html
        id: run_tests
        run: |
          npm run test:unit
        continue-on-error: true

      - name: Upload test report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-report
          path: ./vitestreport
          retention-days: 7

      - name: Set test job status output
        id: set_status
        if: always()
        run: |
          if [ "${{ steps.run_tests.outcome }}" = "success" ]; then
            echo "test_result=success" >> $GITHUB_OUTPUT
            echo "Tests succeeded"
            exit 0
          else
            echo "test_result=failure" >> $GITHUB_OUTPUT
            echo "Tests failed (see vitest report artifact)"
            exit 1
          fi

  # -----------------------
  # Job: Build
  # Runs in parallel with "tests"
  # -----------------------
  build:
    name: Build (Next.js)
    runs-on: ubuntu-latest
    outputs:
      build_result: ${{ steps.set_build_status.outputs.build_result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Build Next.js (.next)
        id: next_build
        run: |
          npm run build
        continue-on-error: true

      - name: Rename .next to next
        if: always()
        run: |
          echo "Current directory:"
          pwd
          echo "Listing files before rename:"
          ls -la
          if [ -d .next ]; then
            mv .next next
            echo "Renamed .next → next"
            echo "Listing files after rename:"
            ls -la
          else
            echo ".next directory not found; rename skipped"
          fi

      - name: Upload build artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: ./next
          retention-days: 7


      - name: Set build job status output
        id: set_build_status
        if: always()
        run: |
          if [ "${{ steps.next_build.outcome }}" = "success" ]; then
            echo "build_result=success" >> $GITHUB_OUTPUT
            echo "Build succeeded"
            exit 0
          else
            echo "build_result=failure" >> $GITHUB_OUTPUT
            echo "Build failed (see build logs / artifact)"
            exit 1
          fi

  # -----------------------
  # Job: Notification
  # Depends on both tests and build;
  # This job will send an email using msmtp.
  # -----------------------
  notify:
    name: Send notification email
    runs-on: ubuntu-latest
    needs: [tests, build]
    if: always()
    steps:
      - name: Checkout (for scripts, optional)
        uses: actions/checkout@v4

      - name: Install required system packages (msmtp)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y msmtp-mta ca-certificates bsd-mailx

      - name: Prepare send-email script
        id: prepare_script
        run: |
          cat > ./send_pipeline_mail.sh <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail

          # Required env vars:
          # MAIL_TO      - recipient email address (must be set as repository secret)
          # SMTP_HOST    - SMTP server host
          # SMTP_PORT    - SMTP server port (e.g. 587)
          # SMTP_USER    - SMTP username
          # SMTP_PASS    - SMTP password

          if [ -z "${MAIL_TO:-}" ]; then
            echo "ERROR: MAIL_TO is not set"
            exit 2
          fi

          TEST_STATUS="${TEST_STATUS:-unknown}"
          BUILD_STATUS="${BUILD_STATUS:-unknown}"
          SUBJECT="CI Pipeline result: Tests=${TEST_STATUS}, Build=${BUILD_STATUS}"

          BODY="Pipeline run for ref: ${GITHUB_REPOSITORY}@${GITHUB_SHA:-unknown}\n\nTests: ${TEST_STATUS}\nBuild: ${BUILD_STATUS}\n\nView artifacts in the workflow run."

          # Configure msmtp at runtime
          MSMPTRC="$(mktemp)"
          chmod 600 "$MSMPTRC"
          cat > "$MSMPTRC" <<MSMTP
          defaults
          tls on
          tls_trust_file /etc/ssl/certs/ca-certificates.crt
          logfile /tmp/msmtp.log

          account default
          host ${SMTP_HOST:-}
          port ${SMTP_PORT:-587}
          auth on
          user ${SMTP_USER:-}
          password ${SMTP_PASS:-}
          from ${MAIL_FROM:-github-actions@$GITHUB_REPOSITORY}
          MSMTP

          export MSMTP_CONFIG="$MSMPTRC"

          echo -e "Subject: ${SUBJECT}\n\n${BODY}" | msmtp --file="$MSMPTRC" --debug -- "${MAIL_TO}"

          echo "--------- msmtp log ---------"
          sed -n '1,200p' /tmp/msmtp.log || true
          echo "-----------------------------"

          rm -f "$MSMPTRC"
          exit 0
          EOF

          chmod +x ./send_pipeline_mail.sh
          echo "send_pipeline_mail.sh created"

      - name: Prepare variables for email
        id: prepare_vars
        run: |
          echo "TEST_STATUS=${{ needs.tests.outputs.test_result }}" >> $GITHUB_ENV
          echo "BUILD_STATUS=${{ needs.build.outputs.build_result }}" >> $GITHUB_ENV
          echo "Prepared TEST_STATUS and BUILD_STATUS environment variables."

      - name: Send email (using msmtp)
        env:
          MAIL_TO: ${{ secrets.MAIL_TO }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          TEST_STATUS: ${{ env.TEST_STATUS }}
          BUILD_STATUS: ${{ env.BUILD_STATUS }}
        run: |
          if [ -z "${MAIL_TO:-}" ]; then
            echo "MAIL_TO not set. Skipping email send (to run for real, add MAIL_TO and SMTP_* secrets)."
            exit 0
          fi

          ./send_pipeline_mail.sh

      - name: Final status output
        run: |
          echo "Notification step finished. Test result: ${{ needs.tests.outputs.test_result }}, Build result: ${{ needs.build.outputs.build_result }}"
  deploy:
    name: Deploy to Ubuntu VPS
    runs-on: ubuntu-latest
    needs: [tests, build]
    if: needs.tests.outputs.test_result == 'success' && needs.build.outputs.build_result == 'success'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GITHUBDEPLOY_KEY }}

      - name: Copy Docker build and run commands to VPS
        run: |
          VPS_USER=${{ secrets.VPS_USER }}
          VPS_HOST=${{ secrets.VPS_HOST }}
          ssh $VPS_USER@$VPS_HOST << EOF
            cd /home/$VPS_USER/app
            git pull origin main
            docker build -t estudeiro .
            docker stop estudeiro || true
            docker rm estudeiro || true
            docker run -d --network host --name estudeiro --env-file .env estudeiro npm start -- -p 3001
          EOF
